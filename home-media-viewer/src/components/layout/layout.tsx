import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import LayoutLoggedIn from '@/components/layout/layoutLoggedIn'
import { AuthContext, AuthData } from '@/components/auth/authContext'
import { useState, useEffect } from 'react'
import type { ReactElement } from 'react'
import LayoutNotLoggedIn from '@/components/layout/layoutNotLoggedIn'

const cookieNames = {
  sessionToken: 'home-media-viewer-user-cookie',
  email: 'hmv-email',
  name: 'hmv-name',
  isadmin: 'hmv-isadmin',
}

const getCookie = (name: string) => {
    // Split cookie string and get all individual name=value pairs in an array
    var cookieArr = document.cookie.split(";");
    
    // Loop through the array elements
    for(var i = 0; i < cookieArr.length; i++) {
        var cookiePair = cookieArr[i].split("=");
        
        /* Removing whitespace at the beginning of the cookie name
        and compare it with the given string */
        if(name == cookiePair[0].trim()) {
            // Decode the cookie value and return
            return decodeURIComponent(cookiePair[1]);
        }
    }
    
    // Return null if not found
    return null;
}

const getAuthDataFromCookie = (): AuthData => {
  if (typeof document !== 'object' || document?.cookie == null) {
    return { isLoggedIn: false };
  }

  const sessionToken = getCookie(cookieNames.sessionToken);
  const email = getCookie(cookieNames.email);
  const name = getCookie(cookieNames.name);
  const isAdmin = getCookie(cookieNames.isadmin) === '1';

  if (sessionToken == null || email == null || name == null) {
    return { isLoggedIn: false };
  }

  const ret = {
    isLoggedIn: true,
    email,
    name,
    isAdmin,
  }

  return ret;
}

export default function Layout({ children }: { children: ReactElement }) {
    const authDataFromCookies = getAuthDataFromCookie();
    console.log('AuthDataFromCookies', authDataFromCookies);

    const [ isAuthProcessed, setIsAuthProcessed ] = useState<boolean>(false);
    const [ authData, setAuthData ] = useState<AuthData>({ isLoggedIn: false });

    useEffect(() => {
      setIsAuthProcessed(true);
      setAuthData(getAuthDataFromCookie());
    }, []);

    const userAuthenticated = (ad: AuthData) => {
        console.log('AuthenticationData', ad);

        if (ad.isLoggedIn) {
            setAuthData(ad);

            const agePart = `; max-age=${ad.sessionExpiresInSeconds}`;

            document.cookie = `${cookieNames.email}=${encodeURIComponent(ad?.email ?? '')}${agePart}`;
            document.cookie = `${cookieNames.name}=${encodeURIComponent(ad?.name ?? '')}${agePart}`;
            document.cookie = `${cookieNames.isadmin}=${encodeURIComponent(ad?.isAdmin ? '1' : '0')}${agePart}`;
        } else {
            document.cookie = `${cookieNames.email}=; max-age=0`;
            document.cookie = `${cookieNames.name}=; max-age=0`;
            document.cookie = `${cookieNames.isadmin}=; max-age=0`;
        }
    };

    let content = <></>;

    if (!isAuthProcessed) {
      content = <>Initiating...</>;
    } else if (authData.isLoggedIn) {
      content = (
            <AuthContext.Provider value={authData}>
              <LayoutLoggedIn>
                {children}
              </LayoutLoggedIn>
            </AuthContext.Provider>
          );
    } else {
      content = <LayoutNotLoggedIn onUserAuthenticated={userAuthenticated} />;
    }

    return (
    <>
      <Head>
        <title>Home Media Viewer</title>
        <meta name="description" content="Home media viewer - generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        { content }
      </main>
    </>
  );
}
